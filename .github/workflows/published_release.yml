name: New release published

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4


      - name: Update version in files
        run: |
          sed -i -E "s|ghcr.io/seaweedbraincy/jellyfin-newsletter:v[0-9]+\.[0-9]+\.[0-9]+|ghcr.io/seaweedbraincy/jellyfin-newsletter:${{ github.event.release.tag_name }}|g" README.md
          sed -i -E "s|ghcr.io/seaweedbraincy/jellyfin-newsletter:v[0-9]+\.[0-9]+\.[0-9]+|ghcr.io/seaweedbraincy/jellyfin-newsletter:${{ github.event.release.tag_name }}|g" docker-compose.yml

      - name: Commit and push changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add README.md docker-compose.yml
          git commit -m "chore: bump image version to ${{ github.event.release.tag_name }}"
          git push origin HEAD:main


  process_issues:
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
      - name: Extract mentioned issues from release body
        id: extract
        run: |
          echo "${{ github.event.release.body }}" | grep -Eoi '(fix(e[sd])?|close[sd]?|resolve[sd]?) #([0-9]+)' | sed -E 's/.*#([0-9]+).*/\1/' | sort -u > issue_ids.txt
          echo "issues=$(cat issue_ids.txt | paste -sd ',' -)" >> $GITHUB_OUTPUT

      - name: Update issues
        if: steps.extract.outputs.issues != ''
        uses: actions/github-script@v7
        with:
          script: |
            const issues = '${{ steps.extract.outputs.issues }}'.split(',');
            const tag = context.payload.release.tag_name;

            for (const issue_number of issues) {
              const issue = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issue_number)
              });

              const currentLabels = issue.data.labels.map(l => l.name);
              const updatedLabels = currentLabels
                .filter(l => !["fixed-in-main", "waiting-for-release"].includes(l));

              // Set updated labels + add "released"
              await github.rest.issues.setLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issue_number),
                labels: [...new Set([...updatedLabels, "released"])]
              });

              // Add comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: Number(issue_number),
                body: `âœ… This issue is now fixed in version \`${tag}\`.`
              });

              // Close the issue
              if (issue.data.state !== "closed") {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: Number(issue_number),
                  state: "closed"
                });
              }
            }
