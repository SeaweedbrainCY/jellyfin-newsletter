name: "Jellyfin-newsletter docker dev image deployment"
permissions:
  contents: read
  packages: write
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+-dev.[0-9]+'



jobs:
    security_test:
        uses: ./.github/workflows/security_test.yml 

    build_and_publish :
      needs: [security_test]
      name: Build and publish dev image
      strategy:
       fail-fast: false
       matrix:
         os:
           - ubuntu-24.04
           - ubuntu-24.04-arm
      runs-on: ${{ matrix.os }}
      env:
        DOCKER_IMAGE_NAME: "jellyfin-newsletter"
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
        
        - name: Extract en variables
          id: vars
          run: |
            echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
            echo "DATE=$(date)" >> $GITHUB_ENV
            echo "REPOSITORY_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV 
            platform=${{ matrix.os == 'ubuntu-24.04' && 'linux/amd64' || 'linux/arm64' }}
            arch=${{ matrix.os == 'ubuntu-24.04' && 'amd64' || 'arm64' }}
            echo "PLATFORM=${platform}" >> $GITHUB_ENV
            echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
            

        - name: Set up Version file
          run: echo ${{ github.ref_name }} > VERSION

        - name: Set up Qemu 
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build and push Docker images
          uses: docker/build-push-action@v6
          id: build
          with:
            context: .
            push: true
            tags: ghcr.io/${{ env.REPOSITORY_NAME }}
            labels: |
              org.opencontainers.image.revision=${{ env.GIT_COMMIT }}
              org.opencontainers.image.created=${{ env.DATE }}
              org.opencontainers.image.version=${{ github.ref_name }}
              org.opencontainers.image.title=Jellyfin Newsletter - Dev version
              org.opencontainers.image.description=The development version of the Jellyfin Newsletter Docker image, used for testing and development purposes.
              org.opencontainers.image.authors=SeaweedbrainCY <contact@seaweedbrain.xyz>
              org.opencontainers.image.url=https://github.com/seaweedbraincy/jellyfin-newsletter
              org.opencontainers.image.source=https://github.com/seaweedbraincy/jellyfin-newsletter
              org.opencontainers.image.licenses=MIT
              org.opencontainers.image.documentation=https://github.com/seaweedbraincy/jellyfin-newsletter#readme
            annotations: |
              org.opencontainers.image.description=The development version of the Jellyfin Newsletter Docker image, used for testing and development purposes.
              org.opencontainers.image.source=https://github.com/seaweedbraincy/jellyfin-newsletter
            cache-from: type=gha
            cache-to: type=gha,mode=max
            platforms: ${{ env.PLATFORM }}
            outputs: type=image,push-by-digest=true,name-canonical=true,push=true


        - name: Export digest
          run: |
            mkdir -p ${{ runner.temp }}/digests
            digest="${{ steps.build.outputs.digest }}"
            touch "${{ runner.temp }}/digests/${digest#sha256:}"

        - name: Upload digest
          uses: actions/upload-artifact@v4
          with:
            name: digests-${{ env.PLATFORM_PAIR }}
            path: ${{ runner.temp }}/digests/*
            if-no-files-found: error
            retention-days: 1


    merge-manifests:
      runs-on: ubuntu-latest
      needs:
        - build_and_publish
      steps:
        - name: Extract Git commit
          id: vars
          run: |
            echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

        - name: Download digests
          uses: actions/download-artifact@v4
          with:
            path: ${{ runner.temp }}/digests
            pattern: digests-*
            merge-multiple: true

        - name: Login to GHCR 
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ghcr.io/${{ env.REPOSITORY_NAME }}
            tags: |
              type=semver,pattern={{version}}
              type=raw,value=dev
            annotations: |
              org.opencontainers.image.description=The development version of the Jellyfin Newsletter Docker image, used for testing and development purposes.
              org.opencontainers.image.source=https://github.com/seaweedbraincy/jellyfin-newsletter

        - name: Create manifest list and push
          working-directory: ${{ runner.temp }}/digests
          run: |
            docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<<   "$DOCKER_METADATA_OUTPUT_JSON") \
              $(printf 'ghcr.io/${{ env.REPOSITORY_NAME }}@sha256:%s ' *) 

        - name: Inspect image
          run: |
            docker buildx imagetools inspect ghcr.io/${{ env.REPOSITORY_NAME }}:${{ steps.meta.outputs.version }}